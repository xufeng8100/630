#Accessing Twitter’s API 

import twitter
CONSUMER_KEY = 'Hr5M7BYAzxBzZuOCREz3oveNV'
CONSUMER_SECRET = 'FbOZXzejM3EvVUnU6I2YwYRzpdRWwk6B3SuzrbS9ao6Uxx9z4k'
OAUTH_TOKEN = '861563111978934272-I7D2m12fd76jKE4BjAge9rOlTdiIBPF'
OAUTH_TOKEN_SECRET = 'xuxX9STvq4NLuLsZg1jjMANqacNy9ThlQ2XUSrmbDxm78'

auth = twitter.oauth.OAuth(OAUTH_TOKEN, OAUTH_TOKEN_SECRET,
                           CONSUMER_KEY, CONSUMER_SECRET)
twitter_api = twitter.Twitter(auth=auth)

#define robust Twitter requests

def make_twitter_request(twitter_api_func, max_errors=10, *args, **kw):

  def handle_twitter_http_error(e, wait_period=2, sleep_when_rate_limited=True):
     if wait_period > 3600: # Seconds
        print >> sys.stderr, 'Too many retries. Quitting.'
        raise e
# See https://dev.twitter.com/docs/error-codes-responses for common codes
     if e.e.code == 401:
        print >> sys.stderr, 'Encountered 401 Error (Not Authorized)'
        return None
     elif e.e.code == 404:
        print >> sys.stderr, 'Encountered 404 Error (Not Found)'
        return None
     elif e.e.code == 429:
        print >> sys.stderr, 'Encountered 429 Error (Rate Limit Exceeded)'
        if sleep_when_rate_limited:
            print >> sys.stderr, "Retrying in 15 minutes...ZzZ..."
            sys.stderr.flush()
            time.sleep(60 * 15 + 5)
            print >> sys.stderr, '...ZzZ...Awake now and trying again.'
            return 2
        else:
          raise e  # Caller must handle the rate limiting issue
     elif e.e.code in (500, 502, 503, 504):
        print >> sys.stderr, 'Encountered %i Error. Retrying in %i seconds' % \
                         (e.e.code, wait_period)
        time.sleep(wait_period)
        wait_period *= 1.5
        return wait_period
     else:
        raise e
    # End of nested helper function
  wait_period = 2
  error_count = 0
  while True:
      try:
            return twitter_api_func(*args, **kw)
      except twitter.api.TwitterHTTPError, e:
           error_count = 0
           wait_period = handle_twitter_http_error(e, wait_period)
           if wait_period is None:
                return
      except URLError, e:
           error_count += 1
           print >> sys.stderr, "URLError encountered. Continuing."
           if error_count > max_errors:
              print >> sys.stderr, "Too many consecutive errors...bailing out."
              raise
      except BadStatusLine, e:
           error_count += 1
           print >> sys.stderr, "BadStatusLine encountered. Continuing."
           if error_count > max_errors:
               print >> sys.stderr, "Too many consecutive errors...bailing out."
               raise
               
#define harvesting a user’s Tweets     

def harvest_user_timeline(twitter_api, screen_name=None, user_id=None, max_results=10000):
     assert (screen_name != None) != (user_id != None), \
"Must have screen_name or user_id, but not both"
     kw = { # Keyword args for the Twitter API call
           'count': 200,
           'trim_user': 'true',
           'include_rts' : 'true',
           'since_id' : 1
           }
     if screen_name:
         kw['screen_name'] = screen_name
     else:
         kw['user_id'] = user_id
     max_pages = 50
     results = []
     tweets = make_twitter_request(twitter_api.statuses.user_timeline, **kw)
     if tweets is None: # 401 (Not Authorized) - Need to bail out on loop entry
         tweets = []
     results += tweets
     print >> sys.stderr, 'Fetched %i tweets' % len(tweets)
     page_num = 1

     if max_results == kw['count']:
         page_num = max_pages # Prevent loop entry
     while page_num < max_pages and len(tweets) > 0 and len(results) < max_results:

            kw['max_id'] = min([ tweet['id'] for tweet in tweets]) - 1
            tweets = make_twitter_request(twitter_api.statuses.user_timeline, **kw)
            results += tweets
            print >> sys.stderr, 'Fetched %i tweets' % (len(tweets),)
            page_num += 1
     print >> sys.stderr, 'Done fetching tweets'
     return results[:max_results]
     
#names are form East Turkestan Liberation Organization's（ELTO）Twitter accounts

name=["uyghurproject","UyghurCongress","fahriu89", "pl4et" ,"SarjaniUyghur2", "Muslim4Mchina","musuluyghur", 
"iamgul8", "Salih_Hudayar" ,"parlabest","UHRP_Chinese", "VoiceUyghur" ,"EastTurkDaily", "SultanUyghur", 
"VoiceOfUyghur", "ismaelan","AbdugheniSabit"]

#built terrorists' corpus

import sys
reload(sys)
sys.setdefaultencoding('utf8')
tweets=[]
for screen_name in name:
     tweet = harvest_user_timeline(twitter_api, screen_name=screen_name,
               max_results=3300)
     tweets +=tweet
with open('terrorists corpus.txt', 'w') as f:
    for tweet in tweets:
        b=str(tweet['text'])
        f.write(b+'\n')
f.close()

#get normal tweets corpus

from nltk.corpus import twitter_samples
strings = twitter_samples.strings('tweets.20150430-223406.json')
a=0
with open('twitter corpus.txt', 'w') as f:
      for string in strings[:30000]:
           f.write(string+'\n')
           a += 1
           print a
f.close()               
